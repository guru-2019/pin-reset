{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SaurabhNilegaonkar\\\\Downloads\\\\react1stApp\\\\my-first-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css'; // import PropTypes from 'prop-types'\n// import Swipe from 'react-easy-swipe'\n// import classnames from 'classnames'\n// import {\n//     overlayStyle,\n//     overlayActiveStyle,\n//     menuOuterStyle,\n//     menuOuterActiveStyle,\n//     menuShadowStyle,\n//     menuShadowActiveStyle,\n//     menuInnerStyle,\n//     getSkew,\n//   } from './styles'\n// function App() {\n\nclass Card extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showMenu: false,\n      isPinReset: false,\n      isEnterPin: false\n    };\n    this.showMenu = this.showMenu.bind(this);\n    this.closeMenu = this.closeMenu.bind(this);\n    this.ResetPin = this.ResetPin.bind(this);\n    this.submitOTP = this.submitOTP.bind(this);\n    this.submitPIN = this.submitPIN.bind(this);\n  }\n\n  showMenu(event) {\n    event.preventDefault();\n    this.setState({\n      showMenu: true\n    }, () => {\n      document.addEventListener('click', this.closeMenu);\n    });\n  }\n\n  closeMenu(event) {\n    if (!this.dropdownMenu.contains(event.target)) {\n      this.setState({\n        showMenu: false,\n        isEnterPin: false\n      }, () => {\n        document.removeEventListener('click', this.closeMenu);\n      });\n    }\n\n    ;\n  }\n\n  ResetPin(event) {\n    this.setState({\n      showMenu: false,\n      isPinReset: true,\n      isEnterPin: false\n    }, () => {\n      document.removeEventListener('click', this.closeMenu);\n    });\n  }\n\n  submitOTP() {\n    this.setState({\n      showMenu: false,\n      isPinReset: false,\n      isEnterPin: true\n    });\n  }\n\n  submitPIN() {\n    this.setState({\n      isEnterPin: false\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.showMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Show menu\"), this.state.showMenu ? React.createElement(\"div\", {\n      // className=\"menu\"\n      width: \"30\",\n      ref: element => {\n        this.dropdownMenu = element;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \" Funds transfer \")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \" Check Balance \")), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.ResetPin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" Reset ATM Pin \"))) : null, this.state.isPinReset ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"You selected to reset ATM pin. One Time Password will be sent to registered cell phone.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.submitOTP,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Next\")) : null, this.state.isEnterPin ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Enter new pin\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), \"Confirm new pin\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.submitPIN,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Submit\")) : null, this.state.isResetPinSuccess ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"You've successfully reset new pin.\") : null);\n  }\n\n} // const IDLE = 'idle'\n// const VERTICAL = 'vertical'\n// const HORIZONTAL = 'horizontal'\n\n/*\n  class CheeseburgerMenu extends Component {\n    constructor() {\n      super()\n      this.state = {\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      }\n  \n      this.onSwipeStart = this.onSwipeStart.bind(this)\n      this.onSwipeMove = this.onSwipeMove.bind(this)\n      this.onSwipeEnd = this.onSwipeEnd.bind(this)\n    }\n  \n    onSwipeStart(event) {\n      if (this.props.isOpen) {\n        this.setState({\n          swiping: true,\n        })\n      }\n    }\n  \n    onSwipeMove(position, event) {\n      if (this.state.swiping) {\n        const options = this.getOptions()\n        let direction = this.state.direction\n  \n        if (direction === IDLE) {\n          const swipeThreshold = options.width / 15\n          const pastThreshold = (\n            (Math.abs(position.x) > swipeThreshold) ||\n            (Math.abs(position.y) > swipeThreshold)\n          )\n  \n          if (pastThreshold) {\n            if (\n              (\n                (!this.props.right && position.x < 0) ||\n                ( this.props.right && position.x > 0)\n              ) &&\n              Math.abs(position.x) > Math.abs(position.y)\n            ) {\n              direction = HORIZONTAL\n            }\n            else {\n              direction = VERTICAL\n            }\n          }\n        }\n  \n        if (direction === HORIZONTAL) {\n          const swipeClosing = (\n            (!this.props.right && position.x < 0) ||\n            ( this.props.right && position.x > 0)\n          )\n  \n          const translateX = (swipeClosing ? position.x : 0)\n  \n          this.setState({\n            direction,\n            swipePosition: position,\n            menuExtraStyle: {\n              transform: getSkew(options) + `translate3d(${translateX}px, 0px, 0px)`,\n              transition: 'transform 0s',\n            },\n          })\n  \n          event.preventDefault()\n        }\n  \n        if (direction === VERTICAL) {\n          this.setState({\n            direction,\n            swipePosition: { x: 0, y: 0 },\n            menuExtraStyle: {},\n          })\n        }\n      }\n    }\n  \n    onSwipeEnd(event) {\n      const swipeCloseThreshold = this.getOptions().width / 3\n      if (\n        (!this.props.right && this.state.swipePosition.x < -swipeCloseThreshold) ||\n        (this.props.right && this.state.swipePosition.x > swipeCloseThreshold)\n      ) {\n        this.props.closeCallback()\n      }\n      this.setState({\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      })\n    }\n  \n    getOptions() {\n      return {\n        isLeft: !this.props.right,\n        transitionTime: this.props.transitionTime || 0.3,\n        topOffset: this.props.topOffset || 0,\n        bottomOffset: this.props.bottomOffset || 0,\n        width: this.props.width || 300,\n        backgroundColor: this.props.backgroundColor || 'white',\n        showShadow: !this.props.noShadow,\n        skewY: this.props.skewY,\n      }\n    }\n  \n    render() {\n      const {\n        isOpen,\n        closeCallback,\n        className,\n        overlayClassName,\n        outerClassName,\n        innerClassName,\n        shadowClassName,\n        children,\n      } = this.props\n  \n      const options = this.getOptions()\n  \n      const baseMenuOuterStyle = (isOpen ? menuOuterActiveStyle(options) : menuOuterStyle(options))\n      const currentMenuOuterStyle = { ...baseMenuOuterStyle, ...this.state.menuExtraStyle }\n  \n      return (\n        // <div className=\"App\">\n        //   <header className=\"App-header\"> \n        //     ATM pin reset\n        //     <br/>Menu goes here 2\n        //   </header>\n        // </div>\n        <div\n          className={classnames(\n            'cheeseburger-menu',\n            className,\n            { open: isOpen }\n          )}\n        >\n          <div\n            className={classnames('cheeseburger-menu-overlay', overlayClassName)}\n            style={isOpen ? overlayActiveStyle(options) : overlayStyle(options)}\n            onClick={closeCallback}\n          />\n  \n          <Swipe\n            onSwipeStart={this.onSwipeStart}\n            onSwipeMove={this.onSwipeMove}\n            onSwipeEnd={this.onSwipeEnd}\n          >\n            <div className={classnames('cheeseburger-menu-outer', outerClassName)} style={currentMenuOuterStyle}>\n              <div className={classnames('cheeseburger-menu-inner', innerClassName)} style={menuInnerStyle(options)}>\n                {children}\n              </div>\n              <div\n                className={classnames('cheeseburger-menu-shadow', shadowClassName)}\n                style={isOpen ? menuShadowActiveStyle(options) : menuShadowStyle(options)}\n              />\n            </div>\n          </Swipe>\n        </div>\n      )\n    }\n  }\n  \n  CheeseburgerMenu.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    closeCallback: PropTypes.func.isRequired,\n    right: PropTypes.bool,\n    transitionTime: PropTypes.number,\n    topOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    bottomOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    width: PropTypes.number,\n    backgroundColor: PropTypes.string,\n    skewY: PropTypes.number,\n    noShadow: PropTypes.bool,\n    className: PropTypes.string,\n    overlayClassName: PropTypes.string,\n    outerClassName: PropTypes.string,\n    innerClassName: PropTypes.string,\n    shadowClassName: PropTypes.string,\n    children: PropTypes.node,\n  }\n  \n  export default CheeseburgerMenu;*/\n// export default App;\n\n\nexport default Card;","map":{"version":3,"sources":["C:/Users/SaurabhNilegaonkar/Downloads/react1stApp/my-first-app/src/App.js"],"names":["React","Component","Card","constructor","state","showMenu","isPinReset","isEnterPin","bind","closeMenu","ResetPin","submitOTP","submitPIN","event","preventDefault","setState","document","addEventListener","dropdownMenu","contains","target","removeEventListener","render","element","isResetPinSuccess"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACE,MAAMC,IAAN,SAAmBD,SAAnB,CAA4B;AAE5BE,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXC,MAAAA,UAAU,EAAE,KAFD;AAGXC,MAAAA,UAAU,EAAE;AAHD,KAAb;AAKA,SAAKF,QAAL,GAAgB,KAAKA,QAAL,CAAcG,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACD;;AACDH,EAAAA,QAAQ,CAACQ,KAAD,EAAQ;AACdA,IAAAA,KAAK,CAACC,cAAN;AAEA,SAAKC,QAAL,CAAc;AAAEV,MAAAA,QAAQ,EAAE;AAAZ,KAAd,EAAkC,MAAM;AACtCW,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKR,SAAxC;AACD,KAFD;AAGD;;AAEDA,EAAAA,SAAS,CAACI,KAAD,EAAQ;AACf,QAAI,CAAC,KAAKK,YAAL,CAAkBC,QAAlB,CAA2BN,KAAK,CAACO,MAAjC,CAAL,EAA+C;AAC7C,WAAKL,QAAL,CAAc;AAAEV,QAAAA,QAAQ,EAAE,KAAZ;AAAmBE,QAAAA,UAAU,EAAE;AAA/B,OAAd,EAAsD,MAAM;AAC1DS,QAAAA,QAAQ,CAACK,mBAAT,CAA6B,OAA7B,EAAsC,KAAKZ,SAA3C;AACD,OAFD;AAGD;;AAAA;AACF;;AAEDC,EAAAA,QAAQ,CAACG,KAAD,EAAO;AAEb,SAAKE,QAAL,CAAc;AAAEV,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,UAAU,EAAE,IAA/B;AAAqCC,MAAAA,UAAU,EAAE;AAAjD,KAAd,EAAwE,MAAM;AAC5ES,MAAAA,QAAQ,CAACK,mBAAT,CAA6B,OAA7B,EAAsC,KAAKZ,SAA3C;AACD,KAFD;AAGD;;AAEDE,EAAAA,SAAS,GAAE;AACT,SAAKI,QAAL,CAAc;AAAEV,MAAAA,QAAQ,EAAE,KAAZ;AAAoBC,MAAAA,UAAU,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE;AAAnD,KAAd;AACD;;AAEDK,EAAAA,SAAS,GAAE;AACT,SAAKG,QAAL,CAAc;AAAER,MAAAA,UAAU,EAAE;AAAd,KAAd;AACD;;AAEDe,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAmBE;AAAQ,MAAA,OAAO,EAAE,KAAKjB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAnBF,EAuBM,KAAKD,KAAL,CAAWC,QAAX,GAEE;AACE;AACA,MAAA,KAAK,EAAC,IAFR;AAGE,MAAA,GAAG,EAAGkB,OAAD,IAAa;AAChB,aAAKL,YAAL,GAAoBK,OAApB;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAJ,CAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,CARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAQ,MAAA,OAAO,EAAE,KAAKb,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAJ,CATF,CAFF,GAaM,IApCZ,EAuCQ,KAAKN,KAAL,CAAWE,UAAX,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAQ,MAAA,OAAO,EAAE,KAAKK,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,CAFF,GAWK,IAlDb,EAqDQ,KAAKP,KAAL,CAAWG,UAAX,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,qBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE;AAAQ,MAAA,OAAO,EAAE,KAAKK,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,CAFF,GAcK,IAnEb,EAsEQ,KAAKR,KAAL,CAAWoB,iBAAX,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,GAKK,IA3Eb,CADF;AAgFD;;AAhI2B,C,CAmI5B;AACA;AACA;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;;;AACA,eAAetB,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// import PropTypes from 'prop-types'\n// import Swipe from 'react-easy-swipe'\n// import classnames from 'classnames'\n\n// import {\n//     overlayStyle,\n//     overlayActiveStyle,\n//     menuOuterStyle,\n//     menuOuterActiveStyle,\n//     menuShadowStyle,\n//     menuShadowActiveStyle,\n//     menuInnerStyle,\n//     getSkew,\n//   } from './styles'\n\n// function App() {\n  class Card extends Component{\n\n  constructor() {\n    super();\n    \n    this.state = {\n      showMenu: false,\n      isPinReset: false,\n      isEnterPin: false\n    }\n    this.showMenu = this.showMenu.bind(this);\n    this.closeMenu = this.closeMenu.bind(this);\n    this.ResetPin = this.ResetPin.bind(this);\n    this.submitOTP = this.submitOTP.bind(this);\n    this.submitPIN = this.submitPIN.bind(this);\n  }\n  showMenu(event) {\n    event.preventDefault();\n    \n    this.setState({ showMenu: true }, () => {\n      document.addEventListener('click', this.closeMenu);\n    });\n  }\n\n  closeMenu(event) {\n    if (!this.dropdownMenu.contains(event.target)) {\n      this.setState({ showMenu: false, isEnterPin: false }, () => {\n        document.removeEventListener('click', this.closeMenu);\n      })\n    };\n  }\n\n  ResetPin(event){\n    \n    this.setState({ showMenu: false, isPinReset: true, isEnterPin: false }, () => {\n      document.removeEventListener('click', this.closeMenu);\n    })\n  }\n\n  submitOTP(){\n    this.setState({ showMenu: false , isPinReset: false, isEnterPin: true });\n  }\n\n  submitPIN(){\n    this.setState({ isEnterPin: false });\n  }\n\n  render(){\n    return (\n      <div\n      >  \n        {/* className=\"App\" */}\n        {/* <header className=\"App-header\"> */}\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          {/* <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n          {/* ATM pin reset\n          <br/>Menu goes here\n        </header> */}\n        <button onClick={this.showMenu}>\n            Show menu\n          </button>\n          {\n            this.state.showMenu\n              ? (\n              <div \n                // className=\"menu\"\n                width=\"30\"\n                ref={(element) => {\n                  this.dropdownMenu = element;\n                }}\n              >\n                <ul><button> Funds transfer </button></ul>\n                <ul><button> Check Balance </button></ul>\n                <ul><button onClick={this.ResetPin}> Reset ATM Pin </button></ul>\n              </div>\n              ): (null)\n            }\n            {\n              this.state.isPinReset \n              ? (\n                <div>\n                  You selected to reset ATM pin. \n                  One Time Password will be sent to registered cell phone.\n                  <br/>\n                  <input type=\"password\"/>\n                  <button onClick={this.submitOTP}>\n                    Next\n                  </button>\n                </div>\n              ) : (null)\n            }\n            {\n              this.state.isEnterPin \n              ? (\n                <div>\n                  Enter new pin\n                  <br/>\n                  <input type=\"password\"/>\n                  <br/>\n                  Confirm new pin\n                  <br/>\n                  <input type=\"password\"/>\n                  <button onClick={this.submitPIN}>\n                    Submit\n                  </button>\n                </div>\n              ) : (null)\n            }\n            {\n              this.state.isResetPinSuccess \n              ? (\n                <div>\n                  You've successfully reset new pin.\n                </div>\n              ) : (null)\n            }\n      </div>\n    );\n  }\n}\n\n  // const IDLE = 'idle'\n  // const VERTICAL = 'vertical'\n  // const HORIZONTAL = 'horizontal'\n/*\n  class CheeseburgerMenu extends Component {\n    constructor() {\n      super()\n      this.state = {\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      }\n  \n      this.onSwipeStart = this.onSwipeStart.bind(this)\n      this.onSwipeMove = this.onSwipeMove.bind(this)\n      this.onSwipeEnd = this.onSwipeEnd.bind(this)\n    }\n  \n    onSwipeStart(event) {\n      if (this.props.isOpen) {\n        this.setState({\n          swiping: true,\n        })\n      }\n    }\n  \n    onSwipeMove(position, event) {\n      if (this.state.swiping) {\n        const options = this.getOptions()\n        let direction = this.state.direction\n  \n        if (direction === IDLE) {\n          const swipeThreshold = options.width / 15\n          const pastThreshold = (\n            (Math.abs(position.x) > swipeThreshold) ||\n            (Math.abs(position.y) > swipeThreshold)\n          )\n  \n          if (pastThreshold) {\n            if (\n              (\n                (!this.props.right && position.x < 0) ||\n                ( this.props.right && position.x > 0)\n              ) &&\n              Math.abs(position.x) > Math.abs(position.y)\n            ) {\n              direction = HORIZONTAL\n            }\n            else {\n              direction = VERTICAL\n            }\n          }\n        }\n  \n        if (direction === HORIZONTAL) {\n          const swipeClosing = (\n            (!this.props.right && position.x < 0) ||\n            ( this.props.right && position.x > 0)\n          )\n  \n          const translateX = (swipeClosing ? position.x : 0)\n  \n          this.setState({\n            direction,\n            swipePosition: position,\n            menuExtraStyle: {\n              transform: getSkew(options) + `translate3d(${translateX}px, 0px, 0px)`,\n              transition: 'transform 0s',\n            },\n          })\n  \n          event.preventDefault()\n        }\n  \n        if (direction === VERTICAL) {\n          this.setState({\n            direction,\n            swipePosition: { x: 0, y: 0 },\n            menuExtraStyle: {},\n          })\n        }\n      }\n    }\n  \n    onSwipeEnd(event) {\n      const swipeCloseThreshold = this.getOptions().width / 3\n      if (\n        (!this.props.right && this.state.swipePosition.x < -swipeCloseThreshold) ||\n        (this.props.right && this.state.swipePosition.x > swipeCloseThreshold)\n      ) {\n        this.props.closeCallback()\n      }\n      this.setState({\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      })\n    }\n  \n    getOptions() {\n      return {\n        isLeft: !this.props.right,\n        transitionTime: this.props.transitionTime || 0.3,\n        topOffset: this.props.topOffset || 0,\n        bottomOffset: this.props.bottomOffset || 0,\n        width: this.props.width || 300,\n        backgroundColor: this.props.backgroundColor || 'white',\n        showShadow: !this.props.noShadow,\n        skewY: this.props.skewY,\n      }\n    }\n  \n    render() {\n      const {\n        isOpen,\n        closeCallback,\n        className,\n        overlayClassName,\n        outerClassName,\n        innerClassName,\n        shadowClassName,\n        children,\n      } = this.props\n  \n      const options = this.getOptions()\n  \n      const baseMenuOuterStyle = (isOpen ? menuOuterActiveStyle(options) : menuOuterStyle(options))\n      const currentMenuOuterStyle = { ...baseMenuOuterStyle, ...this.state.menuExtraStyle }\n  \n      return (\n        // <div className=\"App\">\n        //   <header className=\"App-header\"> \n        //     ATM pin reset\n        //     <br/>Menu goes here 2\n        //   </header>\n        // </div>\n        <div\n          className={classnames(\n            'cheeseburger-menu',\n            className,\n            { open: isOpen }\n          )}\n        >\n          <div\n            className={classnames('cheeseburger-menu-overlay', overlayClassName)}\n            style={isOpen ? overlayActiveStyle(options) : overlayStyle(options)}\n            onClick={closeCallback}\n          />\n  \n          <Swipe\n            onSwipeStart={this.onSwipeStart}\n            onSwipeMove={this.onSwipeMove}\n            onSwipeEnd={this.onSwipeEnd}\n          >\n            <div className={classnames('cheeseburger-menu-outer', outerClassName)} style={currentMenuOuterStyle}>\n              <div className={classnames('cheeseburger-menu-inner', innerClassName)} style={menuInnerStyle(options)}>\n                {children}\n              </div>\n              <div\n                className={classnames('cheeseburger-menu-shadow', shadowClassName)}\n                style={isOpen ? menuShadowActiveStyle(options) : menuShadowStyle(options)}\n              />\n            </div>\n          </Swipe>\n        </div>\n      )\n    }\n  }\n  \n  CheeseburgerMenu.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    closeCallback: PropTypes.func.isRequired,\n    right: PropTypes.bool,\n    transitionTime: PropTypes.number,\n    topOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    bottomOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    width: PropTypes.number,\n    backgroundColor: PropTypes.string,\n    skewY: PropTypes.number,\n    noShadow: PropTypes.bool,\n    className: PropTypes.string,\n    overlayClassName: PropTypes.string,\n    outerClassName: PropTypes.string,\n    innerClassName: PropTypes.string,\n    shadowClassName: PropTypes.string,\n    children: PropTypes.node,\n  }\n  \n  export default CheeseburgerMenu;*/\n\n// export default App;\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}