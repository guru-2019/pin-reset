{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SaurabhNilegaonkar\\\\Downloads\\\\react1stApp\\\\my-first-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css'; // import PropTypes from 'prop-types'\n// import Swipe from 'react-easy-swipe'\n// import classnames from 'classnames'\n// import {\n//     overlayStyle,\n//     overlayActiveStyle,\n//     menuOuterStyle,\n//     menuOuterActiveStyle,\n//     menuShadowStyle,\n//     menuShadowActiveStyle,\n//     menuInnerStyle,\n//     getSkew,\n//   } from './styles'\n// function App() {\n\nclass Card extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showMenu: false\n    };\n    this.showMenu = this.showMenu.bind(this);\n  }\n\n  showMenu(event) {\n    event.preventDefault();\n    this.setState({\n      showMenu: true\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.showMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Show menu\"), this.state.showMenu ? React.createElement(\"div\", {\n      className: \"menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \" Menu item 1 \"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" Menu item 2 \"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" Menu item 3 \")) : null);\n  }\n\n} // const IDLE = 'idle'\n// const VERTICAL = 'vertical'\n// const HORIZONTAL = 'horizontal'\n\n/*\n  class CheeseburgerMenu extends Component {\n    constructor() {\n      super()\n      this.state = {\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      }\n  \n      this.onSwipeStart = this.onSwipeStart.bind(this)\n      this.onSwipeMove = this.onSwipeMove.bind(this)\n      this.onSwipeEnd = this.onSwipeEnd.bind(this)\n    }\n  \n    onSwipeStart(event) {\n      if (this.props.isOpen) {\n        this.setState({\n          swiping: true,\n        })\n      }\n    }\n  \n    onSwipeMove(position, event) {\n      if (this.state.swiping) {\n        const options = this.getOptions()\n        let direction = this.state.direction\n  \n        if (direction === IDLE) {\n          const swipeThreshold = options.width / 15\n          const pastThreshold = (\n            (Math.abs(position.x) > swipeThreshold) ||\n            (Math.abs(position.y) > swipeThreshold)\n          )\n  \n          if (pastThreshold) {\n            if (\n              (\n                (!this.props.right && position.x < 0) ||\n                ( this.props.right && position.x > 0)\n              ) &&\n              Math.abs(position.x) > Math.abs(position.y)\n            ) {\n              direction = HORIZONTAL\n            }\n            else {\n              direction = VERTICAL\n            }\n          }\n        }\n  \n        if (direction === HORIZONTAL) {\n          const swipeClosing = (\n            (!this.props.right && position.x < 0) ||\n            ( this.props.right && position.x > 0)\n          )\n  \n          const translateX = (swipeClosing ? position.x : 0)\n  \n          this.setState({\n            direction,\n            swipePosition: position,\n            menuExtraStyle: {\n              transform: getSkew(options) + `translate3d(${translateX}px, 0px, 0px)`,\n              transition: 'transform 0s',\n            },\n          })\n  \n          event.preventDefault()\n        }\n  \n        if (direction === VERTICAL) {\n          this.setState({\n            direction,\n            swipePosition: { x: 0, y: 0 },\n            menuExtraStyle: {},\n          })\n        }\n      }\n    }\n  \n    onSwipeEnd(event) {\n      const swipeCloseThreshold = this.getOptions().width / 3\n      if (\n        (!this.props.right && this.state.swipePosition.x < -swipeCloseThreshold) ||\n        (this.props.right && this.state.swipePosition.x > swipeCloseThreshold)\n      ) {\n        this.props.closeCallback()\n      }\n      this.setState({\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      })\n    }\n  \n    getOptions() {\n      return {\n        isLeft: !this.props.right,\n        transitionTime: this.props.transitionTime || 0.3,\n        topOffset: this.props.topOffset || 0,\n        bottomOffset: this.props.bottomOffset || 0,\n        width: this.props.width || 300,\n        backgroundColor: this.props.backgroundColor || 'white',\n        showShadow: !this.props.noShadow,\n        skewY: this.props.skewY,\n      }\n    }\n  \n    render() {\n      const {\n        isOpen,\n        closeCallback,\n        className,\n        overlayClassName,\n        outerClassName,\n        innerClassName,\n        shadowClassName,\n        children,\n      } = this.props\n  \n      const options = this.getOptions()\n  \n      const baseMenuOuterStyle = (isOpen ? menuOuterActiveStyle(options) : menuOuterStyle(options))\n      const currentMenuOuterStyle = { ...baseMenuOuterStyle, ...this.state.menuExtraStyle }\n  \n      return (\n        // <div className=\"App\">\n        //   <header className=\"App-header\"> \n        //     ATM pin reset\n        //     <br/>Menu goes here 2\n        //   </header>\n        // </div>\n        <div\n          className={classnames(\n            'cheeseburger-menu',\n            className,\n            { open: isOpen }\n          )}\n        >\n          <div\n            className={classnames('cheeseburger-menu-overlay', overlayClassName)}\n            style={isOpen ? overlayActiveStyle(options) : overlayStyle(options)}\n            onClick={closeCallback}\n          />\n  \n          <Swipe\n            onSwipeStart={this.onSwipeStart}\n            onSwipeMove={this.onSwipeMove}\n            onSwipeEnd={this.onSwipeEnd}\n          >\n            <div className={classnames('cheeseburger-menu-outer', outerClassName)} style={currentMenuOuterStyle}>\n              <div className={classnames('cheeseburger-menu-inner', innerClassName)} style={menuInnerStyle(options)}>\n                {children}\n              </div>\n              <div\n                className={classnames('cheeseburger-menu-shadow', shadowClassName)}\n                style={isOpen ? menuShadowActiveStyle(options) : menuShadowStyle(options)}\n              />\n            </div>\n          </Swipe>\n        </div>\n      )\n    }\n  }\n  \n  CheeseburgerMenu.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    closeCallback: PropTypes.func.isRequired,\n    right: PropTypes.bool,\n    transitionTime: PropTypes.number,\n    topOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    bottomOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    width: PropTypes.number,\n    backgroundColor: PropTypes.string,\n    skewY: PropTypes.number,\n    noShadow: PropTypes.bool,\n    className: PropTypes.string,\n    overlayClassName: PropTypes.string,\n    outerClassName: PropTypes.string,\n    innerClassName: PropTypes.string,\n    shadowClassName: PropTypes.string,\n    children: PropTypes.node,\n  }\n  \n  export default CheeseburgerMenu;*/\n// export default App;\n\n\nexport default Card;","map":{"version":3,"sources":["C:/Users/SaurabhNilegaonkar/Downloads/react1stApp/my-first-app/src/App.js"],"names":["React","Component","Card","constructor","state","showMenu","bind","event","preventDefault","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACE,MAAMC,IAAN,SAAmBD,SAAnB,CAA4B;AAE5BE,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGA,SAAKA,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AACDD,EAAAA,QAAQ,CAACE,KAAD,EAAQ;AACdA,IAAAA,KAAK,CAACC,cAAN;AAEA,SAAKC,QAAL,CAAc;AACZJ,MAAAA,QAAQ,EAAE;AADE,KAAd;AAGD;;AAEDK,EAAAA,MAAM,GAAE;AACN,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAiBE;AAAQ,MAAA,OAAO,EAAE,KAAKL,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjBF,EAqBM,KAAKD,KAAL,CAAWC,QAAX,GAEE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHF,CAFF,GAOM,IA5BZ,CADF;AAiCD;;AApD2B,C,CAuD5B;AACA;AACA;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;;;AACA,eAAeH,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// import PropTypes from 'prop-types'\n// import Swipe from 'react-easy-swipe'\n// import classnames from 'classnames'\n\n// import {\n//     overlayStyle,\n//     overlayActiveStyle,\n//     menuOuterStyle,\n//     menuOuterActiveStyle,\n//     menuShadowStyle,\n//     menuShadowActiveStyle,\n//     menuInnerStyle,\n//     getSkew,\n//   } from './styles'\n\n// function App() {\n  class Card extends Component{\n\n  constructor() {\n    super();\n    \n    this.state = {\n      showMenu: false,\n    }\n    this.showMenu = this.showMenu.bind(this);\n  }\n  showMenu(event) {\n    event.preventDefault();\n    \n    this.setState({\n      showMenu: true,\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\"> */}\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          {/* <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n          {/* ATM pin reset\n          <br/>Menu goes here\n        </header> */}\n        <button onClick={this.showMenu}>\n            Show menu\n          </button>\n          {\n            this.state.showMenu\n              ? (\n              <div className=\"menu\">\n                <button> Menu item 1 </button>\n                <button> Menu item 2 </button>\n                <button> Menu item 3 </button>\n              </div>\n              ): (null)\n            }\n      </div>\n    );\n  }\n}\n\n  // const IDLE = 'idle'\n  // const VERTICAL = 'vertical'\n  // const HORIZONTAL = 'horizontal'\n/*\n  class CheeseburgerMenu extends Component {\n    constructor() {\n      super()\n      this.state = {\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      }\n  \n      this.onSwipeStart = this.onSwipeStart.bind(this)\n      this.onSwipeMove = this.onSwipeMove.bind(this)\n      this.onSwipeEnd = this.onSwipeEnd.bind(this)\n    }\n  \n    onSwipeStart(event) {\n      if (this.props.isOpen) {\n        this.setState({\n          swiping: true,\n        })\n      }\n    }\n  \n    onSwipeMove(position, event) {\n      if (this.state.swiping) {\n        const options = this.getOptions()\n        let direction = this.state.direction\n  \n        if (direction === IDLE) {\n          const swipeThreshold = options.width / 15\n          const pastThreshold = (\n            (Math.abs(position.x) > swipeThreshold) ||\n            (Math.abs(position.y) > swipeThreshold)\n          )\n  \n          if (pastThreshold) {\n            if (\n              (\n                (!this.props.right && position.x < 0) ||\n                ( this.props.right && position.x > 0)\n              ) &&\n              Math.abs(position.x) > Math.abs(position.y)\n            ) {\n              direction = HORIZONTAL\n            }\n            else {\n              direction = VERTICAL\n            }\n          }\n        }\n  \n        if (direction === HORIZONTAL) {\n          const swipeClosing = (\n            (!this.props.right && position.x < 0) ||\n            ( this.props.right && position.x > 0)\n          )\n  \n          const translateX = (swipeClosing ? position.x : 0)\n  \n          this.setState({\n            direction,\n            swipePosition: position,\n            menuExtraStyle: {\n              transform: getSkew(options) + `translate3d(${translateX}px, 0px, 0px)`,\n              transition: 'transform 0s',\n            },\n          })\n  \n          event.preventDefault()\n        }\n  \n        if (direction === VERTICAL) {\n          this.setState({\n            direction,\n            swipePosition: { x: 0, y: 0 },\n            menuExtraStyle: {},\n          })\n        }\n      }\n    }\n  \n    onSwipeEnd(event) {\n      const swipeCloseThreshold = this.getOptions().width / 3\n      if (\n        (!this.props.right && this.state.swipePosition.x < -swipeCloseThreshold) ||\n        (this.props.right && this.state.swipePosition.x > swipeCloseThreshold)\n      ) {\n        this.props.closeCallback()\n      }\n      this.setState({\n        swiping: false,\n        direction: IDLE,\n        swipePosition: { x: 0, y: 0 },\n        menuExtraStyle: {},\n      })\n    }\n  \n    getOptions() {\n      return {\n        isLeft: !this.props.right,\n        transitionTime: this.props.transitionTime || 0.3,\n        topOffset: this.props.topOffset || 0,\n        bottomOffset: this.props.bottomOffset || 0,\n        width: this.props.width || 300,\n        backgroundColor: this.props.backgroundColor || 'white',\n        showShadow: !this.props.noShadow,\n        skewY: this.props.skewY,\n      }\n    }\n  \n    render() {\n      const {\n        isOpen,\n        closeCallback,\n        className,\n        overlayClassName,\n        outerClassName,\n        innerClassName,\n        shadowClassName,\n        children,\n      } = this.props\n  \n      const options = this.getOptions()\n  \n      const baseMenuOuterStyle = (isOpen ? menuOuterActiveStyle(options) : menuOuterStyle(options))\n      const currentMenuOuterStyle = { ...baseMenuOuterStyle, ...this.state.menuExtraStyle }\n  \n      return (\n        // <div className=\"App\">\n        //   <header className=\"App-header\"> \n        //     ATM pin reset\n        //     <br/>Menu goes here 2\n        //   </header>\n        // </div>\n        <div\n          className={classnames(\n            'cheeseburger-menu',\n            className,\n            { open: isOpen }\n          )}\n        >\n          <div\n            className={classnames('cheeseburger-menu-overlay', overlayClassName)}\n            style={isOpen ? overlayActiveStyle(options) : overlayStyle(options)}\n            onClick={closeCallback}\n          />\n  \n          <Swipe\n            onSwipeStart={this.onSwipeStart}\n            onSwipeMove={this.onSwipeMove}\n            onSwipeEnd={this.onSwipeEnd}\n          >\n            <div className={classnames('cheeseburger-menu-outer', outerClassName)} style={currentMenuOuterStyle}>\n              <div className={classnames('cheeseburger-menu-inner', innerClassName)} style={menuInnerStyle(options)}>\n                {children}\n              </div>\n              <div\n                className={classnames('cheeseburger-menu-shadow', shadowClassName)}\n                style={isOpen ? menuShadowActiveStyle(options) : menuShadowStyle(options)}\n              />\n            </div>\n          </Swipe>\n        </div>\n      )\n    }\n  }\n  \n  CheeseburgerMenu.propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    closeCallback: PropTypes.func.isRequired,\n    right: PropTypes.bool,\n    transitionTime: PropTypes.number,\n    topOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    bottomOffset: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    width: PropTypes.number,\n    backgroundColor: PropTypes.string,\n    skewY: PropTypes.number,\n    noShadow: PropTypes.bool,\n    className: PropTypes.string,\n    overlayClassName: PropTypes.string,\n    outerClassName: PropTypes.string,\n    innerClassName: PropTypes.string,\n    shadowClassName: PropTypes.string,\n    children: PropTypes.node,\n  }\n  \n  export default CheeseburgerMenu;*/\n\n// export default App;\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}